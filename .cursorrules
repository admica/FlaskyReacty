# PCAP Server

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

# Collaboration Guidelines

## Question Requirements

You MUST ask questions when:
- Requirements are ambiguous or unclear
- Multiple implementation patterns are viable
- Technical constraints are unclear
- Security implications exist
- Performance trade-offs are present
- New dependencies need to be added
- Architecture decisions are needed
- Data structures are not fully defined
- Error handling requirements are unclear
- State management approach isn't specified
- Component interfaces aren't fully defined

## Implementation Process

Before implementing ANY code:
1. Confirm framework and library versions
2. Verify component requirements
3. Confirm state management approach
4. Verify error handling requirements
5. Confirm API contract details
6. Validate security requirements
7. Verify performance expectations

## Progressive Implementation

1. Start with minimal implementation
2. Confirm approach before proceeding
3. Verify each layer before moving to next
4. Get explicit approval for:
   - Database schema changes
   - API endpoint designs
   - State management strategies
   - Component architecture
   - Error handling approaches
   - Security implementations

## Decision Points

MUST pause and seek confirmation when:
- Starting new features
- Making architectural decisions
- Adding dependencies
- Encountering incomplete specifications
- Choosing between multiple viable approaches
- Implementing security features
- Making performance optimizations
- Designing data structures
- Setting up state management
- Implementing error handling
- Creating new components
- Defining API contracts

## Assumption Handling

- NEVER assume default values without confirmation
- NEVER assume implementation details
- NEVER assume business logic
- ALL assumptions must be explicitly stated and confirmed
- List any assumptions made in bullet points before proceeding

## Interaction Pattern

1. ASK before implementing
2. PROPOSE multiple approaches when applicable
3. WAIT for confirmation
4. IMPLEMENT only the confirmed approach
5. VERIFY implementation matches requirements

## Project Context

The PCAP Server is a distributed network packet capture management platform that coordinates with remote sensors to execute packet capture requests and analyze network data.

Key Features:
- Job Management System
  - Hierarchical job/task structure
  - Location-based sensor targeting
  - Automated task distribution
  - Intelligent job status tracking
- Sensor Integration
  - Metadata collection of /24 subnet visibility
  - Remote PCAP file retrieval
  - Distributed capture coordination
- Data Processing
  - Automated PCAP merging
  - Task result aggregation
  - Status tracking and reporting
- Web Interface
  - Job creation and monitoring
  - Real-time status updates
  - Result visualization
  - User access control

## Code Style and Structure

Frontend:
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Implement proper WebSocket handling for real-time updates
- Use custom hooks for data fetching and state management
- Implement proper error boundaries and loading states
- Structure repository files as follows:

Backend:
- Use Flask Blueprints for API organization
- Implement proper request validation with type hints
- Use raw SQL with parameterized queries (no ORM)
- Follow a modular database initialization approach (numbered SQL files)
- Implement proper error handling and logging
- Use configuration files for environment settings
- Implement proper cleanup handlers for graceful shutdown
- Use Redis for caching and token management
- Implement proper subprocess and thread management for background tasks
- Use type hints for function parameters and returns
- Keep endpoint handlers focused on:
  - Request validation
  - Parameter processing
  - Error handling
  - Response formatting
- Follow RESTful API patterns for endpoints
- Use JWT for authentication with proper token management
- Implement proper WebSocket event handlers
- Use proper connection pooling for database operations

```
pcapserver/
├── api/               # Backend API endpoints
│   ├── auth.py        # Authentication
│   ├── jobs.py        # Job management
│   ├── sensors.py     # Sensor management
│   ├── preferences.py # User preferences
│   ├── health.py      # Health checks
│   ├── search.py      # Search functionality
│   ├── network.py     # Network operations
│   └── admin.py       # Admin operations
├── frontend/
│   └── src/
│       ├── components/       # Shared React components
│       │   ├── dashboard/
│       │   ├── network/
│       │   ├── jobs/
│       │   ├── preferences/
│       │   ├── admin/
│       │   ├── auth/
│       │   ├── layout/
│       │   ├── sensors/
│       │   └── ui/
│       ├── services/
│       ├── routes/
│       ├── lib/
│       └── api/
├── tests/                  # Testing framework
│   ├── base.py             # Base test functionality
│   ├── test_login.py       # Auth tests
│   ├── test_preferences.py # Preferences tests
│   └── *.py                # Additional tests
```

## Tech Stack

### Backend
- Python 3.11+
- Flask 3.1 with blueprints
- Flask-SocketIO 5.4.1 (WebSocket support)
- Redis 5 (for token mgmt and caching)
- JWT for authentication
- PostgreSQL 16 with raw SQL (no ORM)
- asyncpg 0.30 (async database operations)
- Scapy 2.6.1 (packet analysis)
- simpleLogger (custom logging)
- eventlet (async networking)
- Protected routes and session mgmt

### Frontend
- React 18.2
- TypeScript 5.2
- Vite 5.0
- Mantine 7.3 (core UI components)
- Radix UI (low-level components)
- Tailwind CSS
- React Router 6.20
- Three.js and react-globe.gl (for network visualization)
- Axios for API calls
- WebSocket client for real-time updates
- Custom hooks for data fetching
- Error boundary implementation

### Architecture
- Distributed system with remote sensors
- Job/task management system
- Network visualization
- Real-time monitoring
- Role-based access control

## Real-time Communication
- Use Flask-SocketIO for server-side WebSocket handling
- Implement proper socket event handlers and error recovery
- Use proper socket room management for targeted updates
- Handle WebSocket reconnection gracefully

## Background Processing
- Implement proper thread lifecycle management
- Use proper queue management for job processing
- Handle graceful shutdown of background processes
- Implement proper error recovery for failed tasks

## Logging and Monitoring
- Use simpleLogger for consistent log formatting
- Implement proper log levels for different environments
- Add proper transaction tracking
- Log critical operations and errors
- Implement proper cleanup of old log files

## Network Analysis
- Use Scapy for packet analysis and manipulation
- Implement proper PCAP file handling
- Handle large file operations efficiently
- Implement proper network data validation

## Database Operations
- Use asyncpg for async database operations
- Implement proper connection pooling
- Use proper transaction management
- Handle database errors gracefully
- Implement proper query timeouts

## Configuration Management
- Use config.ini for all configuration
- Implement proper environment-specific settings
- Handle configuration reloading
- Validate configuration values
- Use proper default values

## Naming Conventions
- Use lowercase with underscores for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## Syntax and Formatting
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Mantine core components
- Use Radix UI for low-level components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test WebSocket functionality
- Test background processes
- Test error handling and recovery

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Implement proper token management
- Use proper CORS configuration

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements
